/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.db123__.UniqueId;

/**
 * Service object for domain model class {@link UniqueId}.
 */
public interface UniqueIdService {

    /**
     * Creates a new UniqueId. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UniqueId if any.
     *
     * @param uniqueId Details of the UniqueId to be created; value cannot be null.
     * @return The newly created UniqueId.
     */
	UniqueId create(@Valid UniqueId uniqueId);


	/**
	 * Returns UniqueId by given id if exists.
	 *
	 * @param uniqueidId The id of the UniqueId to get; value cannot be null.
	 * @return UniqueId associated with the given uniqueidId.
     * @throws EntityNotFoundException If no UniqueId is found.
	 */
	UniqueId getById(String uniqueidId) throws EntityNotFoundException;

    /**
	 * Find and return the UniqueId by given id if exists, returns null otherwise.
	 *
	 * @param uniqueidId The id of the UniqueId to get; value cannot be null.
	 * @return UniqueId associated with the given uniqueidId.
	 */
	UniqueId findById(String uniqueidId);


	/**
	 * Updates the details of an existing UniqueId. It replaces all fields of the existing UniqueId with the given uniqueId.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on UniqueId if any.
     *
	 * @param uniqueId The details of the UniqueId to be updated; value cannot be null.
	 * @return The updated UniqueId.
	 * @throws EntityNotFoundException if no UniqueId is found with given input.
	 */
	UniqueId update(@Valid UniqueId uniqueId) throws EntityNotFoundException;

    /**
	 * Deletes an existing UniqueId with the given id.
	 *
	 * @param uniqueidId The id of the UniqueId to be deleted; value cannot be null.
	 * @return The deleted UniqueId.
	 * @throws EntityNotFoundException if no UniqueId found with the given id.
	 */
	UniqueId delete(String uniqueidId) throws EntityNotFoundException;

	/**
	 * Find all UniqueIds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UniqueIds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<UniqueId> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all UniqueIds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UniqueIds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<UniqueId> findAll(String query, Pageable pageable);

    /**
	 * Exports all UniqueIds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the UniqueIds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the UniqueId.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

