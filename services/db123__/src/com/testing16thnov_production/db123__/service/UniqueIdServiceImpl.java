/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.db123__.UniqueId;


/**
 * ServiceImpl object for domain model class UniqueId.
 *
 * @see UniqueId
 */
@Service("db123__.UniqueIdService")
@Validated
public class UniqueIdServiceImpl implements UniqueIdService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UniqueIdServiceImpl.class);


    @Autowired
    @Qualifier("db123__.UniqueIdDao")
    private WMGenericDao<UniqueId, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UniqueId, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
	public UniqueId create(UniqueId uniqueId) {
        LOGGER.debug("Creating a new UniqueId with information: {}", uniqueId);
        UniqueId uniqueIdCreated = this.wmGenericDao.create(uniqueId);
        return uniqueIdCreated;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public UniqueId getById(String uniqueidId) throws EntityNotFoundException {
        LOGGER.debug("Finding UniqueId by id: {}", uniqueidId);
        UniqueId uniqueId = this.wmGenericDao.findById(uniqueidId);
        if (uniqueId == null){
            LOGGER.debug("No UniqueId found with id: {}", uniqueidId);
            throw new EntityNotFoundException(String.valueOf(uniqueidId));
        }
        return uniqueId;
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public UniqueId findById(String uniqueidId) {
        LOGGER.debug("Finding UniqueId by id: {}", uniqueidId);
        return this.wmGenericDao.findById(uniqueidId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "db123__TransactionManager")
	@Override
	public UniqueId update(UniqueId uniqueId) throws EntityNotFoundException {
        LOGGER.debug("Updating UniqueId with information: {}", uniqueId);
        this.wmGenericDao.update(uniqueId);

        String uniqueidId = uniqueId.getUniqueId1();

        return this.wmGenericDao.findById(uniqueidId);
    }

    @Transactional(value = "db123__TransactionManager")
	@Override
	public UniqueId delete(String uniqueidId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UniqueId with id: {}", uniqueidId);
        UniqueId deleted = this.wmGenericDao.findById(uniqueidId);
        if (deleted == null) {
            LOGGER.debug("No UniqueId found with id: {}", uniqueidId);
            throw new EntityNotFoundException(String.valueOf(uniqueidId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public Page<UniqueId> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UniqueIds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<UniqueId> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UniqueIds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db123__ for table UniqueId to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

