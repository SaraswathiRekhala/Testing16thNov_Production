/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.db123__.DefaultValues;

/**
 * Service object for domain model class {@link DefaultValues}.
 */
public interface DefaultValuesService {

    /**
     * Creates a new DefaultValues. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DefaultValues if any.
     *
     * @param defaultValues Details of the DefaultValues to be created; value cannot be null.
     * @return The newly created DefaultValues.
     */
	DefaultValues create(@Valid DefaultValues defaultValues);


	/**
	 * Returns DefaultValues by given id if exists.
	 *
	 * @param defaultvaluesId The id of the DefaultValues to get; value cannot be null.
	 * @return DefaultValues associated with the given defaultvaluesId.
     * @throws EntityNotFoundException If no DefaultValues is found.
	 */
	DefaultValues getById(Integer defaultvaluesId) throws EntityNotFoundException;

    /**
	 * Find and return the DefaultValues by given id if exists, returns null otherwise.
	 *
	 * @param defaultvaluesId The id of the DefaultValues to get; value cannot be null.
	 * @return DefaultValues associated with the given defaultvaluesId.
	 */
	DefaultValues findById(Integer defaultvaluesId);


	/**
	 * Updates the details of an existing DefaultValues. It replaces all fields of the existing DefaultValues with the given defaultValues.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on DefaultValues if any.
     *
	 * @param defaultValues The details of the DefaultValues to be updated; value cannot be null.
	 * @return The updated DefaultValues.
	 * @throws EntityNotFoundException if no DefaultValues is found with given input.
	 */
	DefaultValues update(@Valid DefaultValues defaultValues) throws EntityNotFoundException;

    /**
	 * Deletes an existing DefaultValues with the given id.
	 *
	 * @param defaultvaluesId The id of the DefaultValues to be deleted; value cannot be null.
	 * @return The deleted DefaultValues.
	 * @throws EntityNotFoundException if no DefaultValues found with the given id.
	 */
	DefaultValues delete(Integer defaultvaluesId) throws EntityNotFoundException;

	/**
	 * Find all DefaultValues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DefaultValues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<DefaultValues> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all DefaultValues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DefaultValues.
     *
     * @see Pageable
     * @see Page
	 */
    Page<DefaultValues> findAll(String query, Pageable pageable);

    /**
	 * Exports all DefaultValues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the DefaultValues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the DefaultValues.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

