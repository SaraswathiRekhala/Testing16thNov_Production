/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.db123__.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testing16thnov_production.db123__.service.Db123__ProcedureExecutorService;
import com.testing16thnov_production.db123__.models.procedure.*;

@RestController(value = "Db123__.ProcedureExecutionController")
@RequestMapping("/db123__/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private Db123__ProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Procedure_OnlyIN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Procedure_OnlyIN")
    public ProcedureOnlyInResponse executeProcedure_OnlyIN(@RequestParam(value = "id") Integer id, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OnlyIN");
        ProcedureOnlyInResponse _result = procedureService.executeProcedure_OnlyIN(id);
        LOGGER.debug("got the result for named procedure: Procedure_OnlyIN, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_InsertQuery", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert Query")
    public Void executeProcedure_InsertQuery(@Valid @RequestPart("wm_data_json") ProcedureInsertQueryRequest procedureInsertQueryRequest, @RequestPart(value = "BLOBCOL") MultipartFile blobcol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_InsertQuery");
        procedureInsertQueryRequest.setBlobcol(WMMultipartUtils.toByteArray(blobcol));
        Void _result = procedureService.executeProcedure_InsertQuery(procedureInsertQueryRequest);
        LOGGER.debug("got the result for named procedure: Procedure_InsertQuery, result:{}", _result);
        return _result;
    }

}


