/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.db123__.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thnov_production.db123__.UniqueId;
import com.testing16thnov_production.db123__.service.UniqueIdService;


/**
 * Controller object for domain model class UniqueId.
 * @see UniqueId
 */
@RestController("db123__.UniqueIdController")
@Api(value = "UniqueIdController", description = "Exposes APIs to work with UniqueId resource.")
@RequestMapping("/db123__/UniqueId")
public class UniqueIdController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UniqueIdController.class);

    @Autowired
	@Qualifier("db123__.UniqueIdService")
	private UniqueIdService uniqueIdService;

	@ApiOperation(value = "Creates a new UniqueId instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public UniqueId createUniqueId(@RequestPart("wm_data_json") UniqueId uniqueId, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create UniqueId with information: {}" , uniqueId);

    uniqueId.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		uniqueId = uniqueIdService.create(uniqueId);
		LOGGER.debug("Created UniqueId with information: {}" , uniqueId);

	    return uniqueId;
	}

    @ApiOperation(value = "Returns the UniqueId instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UniqueId getUniqueId(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting UniqueId with id: {}" , id);

        UniqueId foundUniqueId = uniqueIdService.getById(id);
        LOGGER.debug("UniqueId details with id: {}" , foundUniqueId);

        return foundUniqueId;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in UniqueId instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getUniqueIdBLOBContent(@PathVariable("id") String id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in UniqueId instance" , fieldName);

        if(!WMRuntimeUtils.isLob(UniqueId.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        UniqueId uniqueId = uniqueIdService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(uniqueId, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the UniqueId instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UniqueId editUniqueId(@PathVariable("id") String id, @RequestBody UniqueId uniqueId) throws EntityNotFoundException {
        LOGGER.debug("Editing UniqueId with id: {}" , uniqueId.getUniqueId1());

        uniqueId.setUniqueId1(id);
        uniqueId = uniqueIdService.update(uniqueId);
        LOGGER.debug("UniqueId details with id: {}" , uniqueId);

        return uniqueId;
    }

    @ApiOperation(value = "Updates the UniqueId instance associated with the given id.This API should be used when UniqueId instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UniqueId editUniqueId(@PathVariable("id") String id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        UniqueId newUniqueId = WMMultipartUtils.toObject(multipartHttpServletRequest, UniqueId.class, "db123__");
        newUniqueId.setUniqueId1(id);

        UniqueId oldUniqueId = uniqueIdService.getById(id);
        WMMultipartUtils.updateLobsContent(oldUniqueId, newUniqueId);
        LOGGER.debug("Updating UniqueId with information: {}" , newUniqueId);

        return uniqueIdService.update(newUniqueId);
    }

    @ApiOperation(value = "Deletes the UniqueId instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUniqueId(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UniqueId with id: {}" , id);

        UniqueId deletedUniqueId = uniqueIdService.delete(id);

        return deletedUniqueId != null;
    }

    /**
     * @deprecated Use {@link #findUniqueIds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UniqueId instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UniqueId> searchUniqueIdsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UniqueIds list");
        return uniqueIdService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UniqueId instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UniqueId> findUniqueIds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UniqueIds list");
        return uniqueIdService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UniqueId instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UniqueId> filterUniqueIds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UniqueIds list");
        return uniqueIdService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUniqueIds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return uniqueIdService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UniqueId instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUniqueIds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UniqueIds");
		return uniqueIdService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUniqueIdAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return uniqueIdService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UniqueIdService instance
	 */
	protected void setUniqueIdService(UniqueIdService service) {
		this.uniqueIdService = service;
	}

}

