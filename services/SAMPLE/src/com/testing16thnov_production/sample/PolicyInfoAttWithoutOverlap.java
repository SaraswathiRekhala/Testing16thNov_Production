/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

/**
 * PolicyInfoAttWithoutOverlap generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`POLICY_INFO_ATT_WITHOUT_OVERLAP`")
@IdClass(PolicyInfoAttWithoutOverlapId.class)
public class PolicyInfoAttWithoutOverlap implements Serializable {

    private String policyId;
    private Date busEnd;
    private Date busStart;
    private int coverage;

    @Id
    @Column(name = "`POLICY_ID`", nullable = false, length = 4)
    public String getPolicyId() {
        return this.policyId;
    }

    public void setPolicyId(String policyId) {
        this.policyId = policyId;
    }

    @Id
    @Column(name = "`BUS_END`", nullable = false)
    public Date getBusEnd() {
        return this.busEnd;
    }

    public void setBusEnd(Date busEnd) {
        this.busEnd = busEnd;
    }

    @Id
    @Column(name = "`BUS_START`", nullable = false)
    public Date getBusStart() {
        return this.busStart;
    }

    public void setBusStart(Date busStart) {
        this.busStart = busStart;
    }

    @Column(name = "`COVERAGE`", nullable = false, scale = 0, precision = 10)
    public int getCoverage() {
        return this.coverage;
    }

    public void setCoverage(int coverage) {
        this.coverage = coverage;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PolicyInfoAttWithoutOverlap)) return false;
        final PolicyInfoAttWithoutOverlap policyInfoAttWithoutOverlap = (PolicyInfoAttWithoutOverlap) o;
        return Objects.equals(getPolicyId(), policyInfoAttWithoutOverlap.getPolicyId()) &&
                Objects.equals(getBusEnd(), policyInfoAttWithoutOverlap.getBusEnd()) &&
                Objects.equals(getBusStart(), policyInfoAttWithoutOverlap.getBusStart());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPolicyId(),
                getBusEnd(),
                getBusStart());
    }
}

