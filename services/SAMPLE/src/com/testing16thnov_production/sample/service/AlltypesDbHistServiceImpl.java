/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.AlltypesDbHist;
import com.testing16thnov_production.sample.AlltypesDbHistId;


/**
 * ServiceImpl object for domain model class AlltypesDbHist.
 *
 * @see AlltypesDbHist
 */
@Service("SAMPLE.AlltypesDbHistService")
@Validated
public class AlltypesDbHistServiceImpl implements AlltypesDbHistService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypesDbHistServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.AlltypesDbHistDao")
    private WMGenericDao<AlltypesDbHist, AlltypesDbHistId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AlltypesDbHist, AlltypesDbHistId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public AlltypesDbHist create(AlltypesDbHist alltypesDbHist) {
        LOGGER.debug("Creating a new AlltypesDbHist with information: {}", alltypesDbHist);
        AlltypesDbHist alltypesDbHistCreated = this.wmGenericDao.create(alltypesDbHist);
        return alltypesDbHistCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public AlltypesDbHist getById(AlltypesDbHistId alltypesdbhistId) throws EntityNotFoundException {
        LOGGER.debug("Finding AlltypesDbHist by id: {}", alltypesdbhistId);
        AlltypesDbHist alltypesDbHist = this.wmGenericDao.findById(alltypesdbhistId);
        if (alltypesDbHist == null){
            LOGGER.debug("No AlltypesDbHist found with id: {}", alltypesdbhistId);
            throw new EntityNotFoundException(String.valueOf(alltypesdbhistId));
        }
        return alltypesDbHist;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public AlltypesDbHist findById(AlltypesDbHistId alltypesdbhistId) {
        LOGGER.debug("Finding AlltypesDbHist by id: {}", alltypesdbhistId);
        return this.wmGenericDao.findById(alltypesdbhistId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public AlltypesDbHist update(AlltypesDbHist alltypesDbHist) throws EntityNotFoundException {
        LOGGER.debug("Updating AlltypesDbHist with information: {}", alltypesDbHist);
        this.wmGenericDao.update(alltypesDbHist);

        AlltypesDbHistId alltypesdbhistId = new AlltypesDbHistId();
        alltypesdbhistId.setIntCol(alltypesDbHist.getIntCol());
        alltypesdbhistId.setIntegerCol(alltypesDbHist.getIntegerCol());
        alltypesdbhistId.setSmallintCol(alltypesDbHist.getSmallintCol());
        alltypesdbhistId.setBigintCol(alltypesDbHist.getBigintCol());
        alltypesdbhistId.setDecimalCol(alltypesDbHist.getDecimalCol());
        alltypesdbhistId.setNumericCol(alltypesDbHist.getNumericCol());
        alltypesdbhistId.setNumericPecCol(alltypesDbHist.getNumericPecCol());
        alltypesdbhistId.setCharCol(alltypesDbHist.getCharCol());
        alltypesdbhistId.setVarcharPrecCol(alltypesDbHist.getVarcharPrecCol());
        alltypesdbhistId.setClobCol(alltypesDbHist.getClobCol());
        alltypesdbhistId.setBinaryLargeObjectCol(alltypesDbHist.getBinaryLargeObjectCol());
        alltypesdbhistId.setVarbinaryPrecCol(alltypesDbHist.getVarbinaryPrecCol());
        alltypesdbhistId.setBlobCol(alltypesDbHist.getBlobCol());
        alltypesdbhistId.setTimeCol(alltypesDbHist.getTimeCol());
        alltypesdbhistId.setDate(alltypesDbHist.getDate());
        alltypesdbhistId.setTimestampCol(alltypesDbHist.getTimestampCol());
        alltypesdbhistId.setBooleanCol(alltypesDbHist.getBooleanCol());
        alltypesdbhistId.setDecimal10Col(alltypesDbHist.getDecimal10Col());
        alltypesdbhistId.setDecimal4Column(alltypesDbHist.getDecimal4Column());
        alltypesdbhistId.setSysStart(alltypesDbHist.getSysStart());
        alltypesdbhistId.setSysEnd(alltypesDbHist.getSysEnd());
        alltypesdbhistId.setCreateId(alltypesDbHist.getCreateId());

        return this.wmGenericDao.findById(alltypesdbhistId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public AlltypesDbHist delete(AlltypesDbHistId alltypesdbhistId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AlltypesDbHist with id: {}", alltypesdbhistId);
        AlltypesDbHist deleted = this.wmGenericDao.findById(alltypesdbhistId);
        if (deleted == null) {
            LOGGER.debug("No AlltypesDbHist found with id: {}", alltypesdbhistId);
            throw new EntityNotFoundException(String.valueOf(alltypesdbhistId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<AlltypesDbHist> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesDbHists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<AlltypesDbHist> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesDbHists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table AlltypesDbHist to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

