/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.Userlogin;


/**
 * ServiceImpl object for domain model class Userlogin.
 *
 * @see Userlogin
 */
@Service("SAMPLE.UserloginService")
@Validated
public class UserloginServiceImpl implements UserloginService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserloginServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.UserloginDao")
    private WMGenericDao<Userlogin, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Userlogin, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Userlogin create(Userlogin userlogin) {
        LOGGER.debug("Creating a new Userlogin with information: {}", userlogin);
        Userlogin userloginCreated = this.wmGenericDao.create(userlogin);
        return userloginCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Userlogin getById(Integer userloginId) throws EntityNotFoundException {
        LOGGER.debug("Finding Userlogin by id: {}", userloginId);
        Userlogin userlogin = this.wmGenericDao.findById(userloginId);
        if (userlogin == null){
            LOGGER.debug("No Userlogin found with id: {}", userloginId);
            throw new EntityNotFoundException(String.valueOf(userloginId));
        }
        return userlogin;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Userlogin findById(Integer userloginId) {
        LOGGER.debug("Finding Userlogin by id: {}", userloginId);
        return this.wmGenericDao.findById(userloginId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Userlogin update(Userlogin userlogin) throws EntityNotFoundException {
        LOGGER.debug("Updating Userlogin with information: {}", userlogin);
        this.wmGenericDao.update(userlogin);

        Integer userloginId = userlogin.getUserid();

        return this.wmGenericDao.findById(userloginId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Userlogin delete(Integer userloginId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Userlogin with id: {}", userloginId);
        Userlogin deleted = this.wmGenericDao.findById(userloginId);
        if (deleted == null) {
            LOGGER.debug("No Userlogin found with id: {}", userloginId);
            throw new EntityNotFoundException(String.valueOf(userloginId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Userlogin> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Userlogins");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Userlogin> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Userlogins");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Userlogin to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

