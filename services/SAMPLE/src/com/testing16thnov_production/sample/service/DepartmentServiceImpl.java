/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.Department;


/**
 * ServiceImpl object for domain model class Department.
 *
 * @see Department
 */
@Service("SAMPLE.DepartmentService")
@Validated
public class DepartmentServiceImpl implements DepartmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.DepartmentDao")
    private WMGenericDao<Department, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Department, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Department create(Department department) {
        LOGGER.debug("Creating a new Department with information: {}", department);
        Department departmentCreated = this.wmGenericDao.create(department);
        if(departmentCreated.getDepartmentsForAdmrdept() != null) {
            for(Department departmentsForAdmrdept : departmentCreated.getDepartmentsForAdmrdept()) {
                departmentsForAdmrdept.setDepartmentByAdmrdept(departmentCreated);
                LOGGER.debug("Creating a new child Department with information: {}", departmentsForAdmrdept);
                create(departmentsForAdmrdept);
            }
        }
        return departmentCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Department getById(String departmentId) throws EntityNotFoundException {
        LOGGER.debug("Finding Department by id: {}", departmentId);
        Department department = this.wmGenericDao.findById(departmentId);
        if (department == null){
            LOGGER.debug("No Department found with id: {}", departmentId);
            throw new EntityNotFoundException(String.valueOf(departmentId));
        }
        return department;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Department findById(String departmentId) {
        LOGGER.debug("Finding Department by id: {}", departmentId);
        return this.wmGenericDao.findById(departmentId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Department update(Department department) throws EntityNotFoundException {
        LOGGER.debug("Updating Department with information: {}", department);
        this.wmGenericDao.update(department);

        String departmentId = department.getDeptno();

        return this.wmGenericDao.findById(departmentId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Department delete(String departmentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Department with id: {}", departmentId);
        Department deleted = this.wmGenericDao.findById(departmentId);
        if (deleted == null) {
            LOGGER.debug("No Department found with id: {}", departmentId);
            throw new EntityNotFoundException(String.valueOf(departmentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Department> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Department> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Department to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Department> findAssociatedDepartmentsForAdmrdept(String deptno, Pageable pageable) {
        LOGGER.debug("Fetching all associated departmentsForAdmrdept");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("departmentByAdmrdept.deptno = '" + deptno + "'");

        return findAll(queryBuilder.toString(), pageable);
    }


}

