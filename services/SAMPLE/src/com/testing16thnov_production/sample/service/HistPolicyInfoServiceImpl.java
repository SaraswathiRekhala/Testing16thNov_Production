/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.HistPolicyInfo;
import com.testing16thnov_production.sample.HistPolicyInfoId;


/**
 * ServiceImpl object for domain model class HistPolicyInfo.
 *
 * @see HistPolicyInfo
 */
@Service("SAMPLE.HistPolicyInfoService")
@Validated
public class HistPolicyInfoServiceImpl implements HistPolicyInfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HistPolicyInfoServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.HistPolicyInfoDao")
    private WMGenericDao<HistPolicyInfo, HistPolicyInfoId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<HistPolicyInfo, HistPolicyInfoId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public HistPolicyInfo create(HistPolicyInfo histPolicyInfo) {
        LOGGER.debug("Creating a new HistPolicyInfo with information: {}", histPolicyInfo);
        HistPolicyInfo histPolicyInfoCreated = this.wmGenericDao.create(histPolicyInfo);
        return histPolicyInfoCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public HistPolicyInfo getById(HistPolicyInfoId histpolicyinfoId) throws EntityNotFoundException {
        LOGGER.debug("Finding HistPolicyInfo by id: {}", histpolicyinfoId);
        HistPolicyInfo histPolicyInfo = this.wmGenericDao.findById(histpolicyinfoId);
        if (histPolicyInfo == null){
            LOGGER.debug("No HistPolicyInfo found with id: {}", histpolicyinfoId);
            throw new EntityNotFoundException(String.valueOf(histpolicyinfoId));
        }
        return histPolicyInfo;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public HistPolicyInfo findById(HistPolicyInfoId histpolicyinfoId) {
        LOGGER.debug("Finding HistPolicyInfo by id: {}", histpolicyinfoId);
        return this.wmGenericDao.findById(histpolicyinfoId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public HistPolicyInfo update(HistPolicyInfo histPolicyInfo) throws EntityNotFoundException {
        LOGGER.debug("Updating HistPolicyInfo with information: {}", histPolicyInfo);
        this.wmGenericDao.update(histPolicyInfo);

        HistPolicyInfoId histpolicyinfoId = new HistPolicyInfoId();
        histpolicyinfoId.setPolicyId(histPolicyInfo.getPolicyId());
        histpolicyinfoId.setCoverage(histPolicyInfo.getCoverage());
        histpolicyinfoId.setSysStart(histPolicyInfo.getSysStart());
        histpolicyinfoId.setSysEnd(histPolicyInfo.getSysEnd());
        histpolicyinfoId.setCreateId(histPolicyInfo.getCreateId());

        return this.wmGenericDao.findById(histpolicyinfoId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public HistPolicyInfo delete(HistPolicyInfoId histpolicyinfoId) throws EntityNotFoundException {
        LOGGER.debug("Deleting HistPolicyInfo with id: {}", histpolicyinfoId);
        HistPolicyInfo deleted = this.wmGenericDao.findById(histpolicyinfoId);
        if (deleted == null) {
            LOGGER.debug("No HistPolicyInfo found with id: {}", histpolicyinfoId);
            throw new EntityNotFoundException(String.valueOf(histpolicyinfoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<HistPolicyInfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all HistPolicyInfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<HistPolicyInfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all HistPolicyInfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table HistPolicyInfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

