/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.PolicyInfoAttWithoutOverlap;
import com.testing16thnov_production.sample.PolicyInfoAttWithoutOverlapId;


/**
 * ServiceImpl object for domain model class PolicyInfoAttWithoutOverlap.
 *
 * @see PolicyInfoAttWithoutOverlap
 */
@Service("SAMPLE.PolicyInfoAttWithoutOverlapService")
@Validated
public class PolicyInfoAttWithoutOverlapServiceImpl implements PolicyInfoAttWithoutOverlapService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyInfoAttWithoutOverlapServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.PolicyInfoAttWithoutOverlapDao")
    private WMGenericDao<PolicyInfoAttWithoutOverlap, PolicyInfoAttWithoutOverlapId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyInfoAttWithoutOverlap, PolicyInfoAttWithoutOverlapId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public PolicyInfoAttWithoutOverlap create(PolicyInfoAttWithoutOverlap policyInfoAttWithoutOverlap) {
        LOGGER.debug("Creating a new PolicyInfoAttWithoutOverlap with information: {}", policyInfoAttWithoutOverlap);
        PolicyInfoAttWithoutOverlap policyInfoAttWithoutOverlapCreated = this.wmGenericDao.create(policyInfoAttWithoutOverlap);
        return policyInfoAttWithoutOverlapCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyInfoAttWithoutOverlap getById(PolicyInfoAttWithoutOverlapId policyinfoattwithoutoverlapId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyInfoAttWithoutOverlap by id: {}", policyinfoattwithoutoverlapId);
        PolicyInfoAttWithoutOverlap policyInfoAttWithoutOverlap = this.wmGenericDao.findById(policyinfoattwithoutoverlapId);
        if (policyInfoAttWithoutOverlap == null){
            LOGGER.debug("No PolicyInfoAttWithoutOverlap found with id: {}", policyinfoattwithoutoverlapId);
            throw new EntityNotFoundException(String.valueOf(policyinfoattwithoutoverlapId));
        }
        return policyInfoAttWithoutOverlap;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyInfoAttWithoutOverlap findById(PolicyInfoAttWithoutOverlapId policyinfoattwithoutoverlapId) {
        LOGGER.debug("Finding PolicyInfoAttWithoutOverlap by id: {}", policyinfoattwithoutoverlapId);
        return this.wmGenericDao.findById(policyinfoattwithoutoverlapId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public PolicyInfoAttWithoutOverlap update(PolicyInfoAttWithoutOverlap policyInfoAttWithoutOverlap) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyInfoAttWithoutOverlap with information: {}", policyInfoAttWithoutOverlap);
        this.wmGenericDao.update(policyInfoAttWithoutOverlap);

        PolicyInfoAttWithoutOverlapId policyinfoattwithoutoverlapId = new PolicyInfoAttWithoutOverlapId();
        policyinfoattwithoutoverlapId.setPolicyId(policyInfoAttWithoutOverlap.getPolicyId());
        policyinfoattwithoutoverlapId.setBusEnd(policyInfoAttWithoutOverlap.getBusEnd());
        policyinfoattwithoutoverlapId.setBusStart(policyInfoAttWithoutOverlap.getBusStart());

        return this.wmGenericDao.findById(policyinfoattwithoutoverlapId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public PolicyInfoAttWithoutOverlap delete(PolicyInfoAttWithoutOverlapId policyinfoattwithoutoverlapId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyInfoAttWithoutOverlap with id: {}", policyinfoattwithoutoverlapId);
        PolicyInfoAttWithoutOverlap deleted = this.wmGenericDao.findById(policyinfoattwithoutoverlapId);
        if (deleted == null) {
            LOGGER.debug("No PolicyInfoAttWithoutOverlap found with id: {}", policyinfoattwithoutoverlapId);
            throw new EntityNotFoundException(String.valueOf(policyinfoattwithoutoverlapId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<PolicyInfoAttWithoutOverlap> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyInfoAttWithoutOverlaps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicyInfoAttWithoutOverlap> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyInfoAttWithoutOverlaps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table PolicyInfoAttWithoutOverlap to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

