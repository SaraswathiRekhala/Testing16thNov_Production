/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.PolicyInfoAttWithoutOverlap;
import com.testing16thnov_production.sample.PolicyInfoAttWithoutOverlapId;

/**
 * Service object for domain model class {@link PolicyInfoAttWithoutOverlap}.
 */
public interface PolicyInfoAttWithoutOverlapService {

    /**
     * Creates a new PolicyInfoAttWithoutOverlap. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyInfoAttWithoutOverlap if any.
     *
     * @param policyInfoAttWithoutOverlap Details of the PolicyInfoAttWithoutOverlap to be created; value cannot be null.
     * @return The newly created PolicyInfoAttWithoutOverlap.
     */
	PolicyInfoAttWithoutOverlap create(@Valid PolicyInfoAttWithoutOverlap policyInfoAttWithoutOverlap);


	/**
	 * Returns PolicyInfoAttWithoutOverlap by given id if exists.
	 *
	 * @param policyinfoattwithoutoverlapId The id of the PolicyInfoAttWithoutOverlap to get; value cannot be null.
	 * @return PolicyInfoAttWithoutOverlap associated with the given policyinfoattwithoutoverlapId.
     * @throws EntityNotFoundException If no PolicyInfoAttWithoutOverlap is found.
	 */
	PolicyInfoAttWithoutOverlap getById(PolicyInfoAttWithoutOverlapId policyinfoattwithoutoverlapId) throws EntityNotFoundException;

    /**
	 * Find and return the PolicyInfoAttWithoutOverlap by given id if exists, returns null otherwise.
	 *
	 * @param policyinfoattwithoutoverlapId The id of the PolicyInfoAttWithoutOverlap to get; value cannot be null.
	 * @return PolicyInfoAttWithoutOverlap associated with the given policyinfoattwithoutoverlapId.
	 */
	PolicyInfoAttWithoutOverlap findById(PolicyInfoAttWithoutOverlapId policyinfoattwithoutoverlapId);


	/**
	 * Updates the details of an existing PolicyInfoAttWithoutOverlap. It replaces all fields of the existing PolicyInfoAttWithoutOverlap with the given policyInfoAttWithoutOverlap.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyInfoAttWithoutOverlap if any.
     *
	 * @param policyInfoAttWithoutOverlap The details of the PolicyInfoAttWithoutOverlap to be updated; value cannot be null.
	 * @return The updated PolicyInfoAttWithoutOverlap.
	 * @throws EntityNotFoundException if no PolicyInfoAttWithoutOverlap is found with given input.
	 */
	PolicyInfoAttWithoutOverlap update(@Valid PolicyInfoAttWithoutOverlap policyInfoAttWithoutOverlap) throws EntityNotFoundException;

    /**
	 * Deletes an existing PolicyInfoAttWithoutOverlap with the given id.
	 *
	 * @param policyinfoattwithoutoverlapId The id of the PolicyInfoAttWithoutOverlap to be deleted; value cannot be null.
	 * @return The deleted PolicyInfoAttWithoutOverlap.
	 * @throws EntityNotFoundException if no PolicyInfoAttWithoutOverlap found with the given id.
	 */
	PolicyInfoAttWithoutOverlap delete(PolicyInfoAttWithoutOverlapId policyinfoattwithoutoverlapId) throws EntityNotFoundException;

	/**
	 * Find all PolicyInfoAttWithoutOverlaps matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyInfoAttWithoutOverlaps.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PolicyInfoAttWithoutOverlap> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PolicyInfoAttWithoutOverlaps matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyInfoAttWithoutOverlaps.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyInfoAttWithoutOverlap> findAll(String query, Pageable pageable);

    /**
	 * Exports all PolicyInfoAttWithoutOverlaps matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PolicyInfoAttWithoutOverlaps in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PolicyInfoAttWithoutOverlap.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

