/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.TableName_2;
import com.testing16thnov_production.sample.TableName_2Id;


/**
 * ServiceImpl object for domain model class TableName_2.
 *
 * @see TableName_2
 */
@Service("SAMPLE.TableName_2Service")
@Validated
public class TableName_2ServiceImpl implements TableName_2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TableName_2ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.TableName_2Dao")
    private WMGenericDao<TableName_2, TableName_2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TableName_2, TableName_2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public TableName_2 create(TableName_2 tableName2) {
        LOGGER.debug("Creating a new TableName_2 with information: {}", tableName2);
        TableName_2 tableName2Created = this.wmGenericDao.create(tableName2);
        return tableName2Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public TableName_2 getById(TableName_2Id tablename2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding TableName_2 by id: {}", tablename2Id);
        TableName_2 tableName2 = this.wmGenericDao.findById(tablename2Id);
        if (tableName2 == null){
            LOGGER.debug("No TableName_2 found with id: {}", tablename2Id);
            throw new EntityNotFoundException(String.valueOf(tablename2Id));
        }
        return tableName2;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public TableName_2 findById(TableName_2Id tablename2Id) {
        LOGGER.debug("Finding TableName_2 by id: {}", tablename2Id);
        return this.wmGenericDao.findById(tablename2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public TableName_2 update(TableName_2 tableName2) throws EntityNotFoundException {
        LOGGER.debug("Updating TableName_2 with information: {}", tableName2);
        this.wmGenericDao.update(tableName2);

        TableName_2Id tablename2Id = new TableName_2Id();
        tablename2Id.setColumn12(tableName2.getColumn12());
        tablename2Id.setColumn22(tableName2.getColumn22());

        return this.wmGenericDao.findById(tablename2Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public TableName_2 delete(TableName_2Id tablename2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TableName_2 with id: {}", tablename2Id);
        TableName_2 deleted = this.wmGenericDao.findById(tablename2Id);
        if (deleted == null) {
            LOGGER.debug("No TableName_2 found with id: {}", tablename2Id);
            throw new EntityNotFoundException(String.valueOf(tablename2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<TableName_2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TableName_2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<TableName_2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TableName_2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table TableName_2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

