/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.TestrelorderId;
import com.testing16thnov_production.sample.Testrelorderchild;


/**
 * ServiceImpl object for domain model class Testrelorderchild.
 *
 * @see Testrelorderchild
 */
@Service("SAMPLE.TestrelorderchildService")
@Validated
public class TestrelorderchildServiceImpl implements TestrelorderchildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestrelorderchildServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.TestrelorderchildDao")
    private WMGenericDao<Testrelorderchild, TestrelorderId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Testrelorderchild, TestrelorderId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Testrelorderchild create(Testrelorderchild testrelorderchild) {
        LOGGER.debug("Creating a new Testrelorderchild with information: {}", testrelorderchild);
        Testrelorderchild testrelorderchildCreated = this.wmGenericDao.create(testrelorderchild);
        return testrelorderchildCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Testrelorderchild getById(TestrelorderId testrelorderchildId) throws EntityNotFoundException {
        LOGGER.debug("Finding Testrelorderchild by id: {}", testrelorderchildId);
        Testrelorderchild testrelorderchild = this.wmGenericDao.findById(testrelorderchildId);
        if (testrelorderchild == null){
            LOGGER.debug("No Testrelorderchild found with id: {}", testrelorderchildId);
            throw new EntityNotFoundException(String.valueOf(testrelorderchildId));
        }
        return testrelorderchild;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Testrelorderchild findById(TestrelorderId testrelorderchildId) {
        LOGGER.debug("Finding Testrelorderchild by id: {}", testrelorderchildId);
        return this.wmGenericDao.findById(testrelorderchildId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Testrelorderchild update(Testrelorderchild testrelorderchild) throws EntityNotFoundException {
        LOGGER.debug("Updating Testrelorderchild with information: {}", testrelorderchild);
        this.wmGenericDao.update(testrelorderchild);

        TestrelorderId testrelorderchildId = new TestrelorderId();
        testrelorderchildId.setColumn2(testrelorderchild.getColumn2());
        testrelorderchildId.setColumn1(testrelorderchild.getColumn1());

        return this.wmGenericDao.findById(testrelorderchildId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Testrelorderchild delete(TestrelorderId testrelorderchildId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Testrelorderchild with id: {}", testrelorderchildId);
        Testrelorderchild deleted = this.wmGenericDao.findById(testrelorderchildId);
        if (deleted == null) {
            LOGGER.debug("No Testrelorderchild found with id: {}", testrelorderchildId);
            throw new EntityNotFoundException(String.valueOf(testrelorderchildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Testrelorderchild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Testrelorderchildren");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Testrelorderchild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Testrelorderchildren");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Testrelorderchild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

