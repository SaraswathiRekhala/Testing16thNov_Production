/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing16thnov_production.sample.HistPolicyInfo;
import com.testing16thnov_production.sample.HistPolicyInfoId;

/**
 * Service object for domain model class {@link HistPolicyInfo}.
 */
public interface HistPolicyInfoService {

    /**
     * Creates a new HistPolicyInfo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on HistPolicyInfo if any.
     *
     * @param histPolicyInfo Details of the HistPolicyInfo to be created; value cannot be null.
     * @return The newly created HistPolicyInfo.
     */
	HistPolicyInfo create(@Valid HistPolicyInfo histPolicyInfo);


	/**
	 * Returns HistPolicyInfo by given id if exists.
	 *
	 * @param histpolicyinfoId The id of the HistPolicyInfo to get; value cannot be null.
	 * @return HistPolicyInfo associated with the given histpolicyinfoId.
     * @throws EntityNotFoundException If no HistPolicyInfo is found.
	 */
	HistPolicyInfo getById(HistPolicyInfoId histpolicyinfoId) throws EntityNotFoundException;

    /**
	 * Find and return the HistPolicyInfo by given id if exists, returns null otherwise.
	 *
	 * @param histpolicyinfoId The id of the HistPolicyInfo to get; value cannot be null.
	 * @return HistPolicyInfo associated with the given histpolicyinfoId.
	 */
	HistPolicyInfo findById(HistPolicyInfoId histpolicyinfoId);


	/**
	 * Updates the details of an existing HistPolicyInfo. It replaces all fields of the existing HistPolicyInfo with the given histPolicyInfo.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on HistPolicyInfo if any.
     *
	 * @param histPolicyInfo The details of the HistPolicyInfo to be updated; value cannot be null.
	 * @return The updated HistPolicyInfo.
	 * @throws EntityNotFoundException if no HistPolicyInfo is found with given input.
	 */
	HistPolicyInfo update(@Valid HistPolicyInfo histPolicyInfo) throws EntityNotFoundException;

    /**
	 * Deletes an existing HistPolicyInfo with the given id.
	 *
	 * @param histpolicyinfoId The id of the HistPolicyInfo to be deleted; value cannot be null.
	 * @return The deleted HistPolicyInfo.
	 * @throws EntityNotFoundException if no HistPolicyInfo found with the given id.
	 */
	HistPolicyInfo delete(HistPolicyInfoId histpolicyinfoId) throws EntityNotFoundException;

	/**
	 * Find all HistPolicyInfos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching HistPolicyInfos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<HistPolicyInfo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all HistPolicyInfos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching HistPolicyInfos.
     *
     * @see Pageable
     * @see Page
	 */
    Page<HistPolicyInfo> findAll(String query, Pageable pageable);

    /**
	 * Exports all HistPolicyInfos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the HistPolicyInfos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the HistPolicyInfo.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

