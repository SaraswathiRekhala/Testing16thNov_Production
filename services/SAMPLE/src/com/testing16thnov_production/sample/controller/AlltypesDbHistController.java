/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thnov_production.sample.AlltypesDbHist;
import com.testing16thnov_production.sample.AlltypesDbHistId;
import com.testing16thnov_production.sample.service.AlltypesDbHistService;


/**
 * Controller object for domain model class AlltypesDbHist.
 * @see AlltypesDbHist
 */
@RestController("SAMPLE.AlltypesDbHistController")
@Api(value = "AlltypesDbHistController", description = "Exposes APIs to work with AlltypesDbHist resource.")
@RequestMapping("/SAMPLE/AlltypesDbHist")
public class AlltypesDbHistController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypesDbHistController.class);

    @Autowired
	@Qualifier("SAMPLE.AlltypesDbHistService")
	private AlltypesDbHistService alltypesDbHistService;

	@ApiOperation(value = "Creates a new AlltypesDbHist instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public AlltypesDbHist createAlltypesDbHist(@RequestPart("wm_data_json") AlltypesDbHist alltypesDbHist, @RequestPart(value = "binaryLargeObjectCol", required = false) MultipartFile _binaryLargeObjectCol, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create AlltypesDbHist with information: {}" , alltypesDbHist);

    alltypesDbHist.setBinaryLargeObjectCol(WMMultipartUtils.toByteArray(_binaryLargeObjectCol));
    alltypesDbHist.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		alltypesDbHist = alltypesDbHistService.create(alltypesDbHist);
		LOGGER.debug("Created AlltypesDbHist with information: {}" , alltypesDbHist);

	    return alltypesDbHist;
	}

@ApiOperation(value = "Returns the AlltypesDbHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesDbHist getAlltypesDbHist(@RequestParam("intCol") Integer intCol,@RequestParam("integerCol") Integer integerCol,@RequestParam("smallintCol") Short smallintCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("decimalCol") Short decimalCol,@RequestParam("numericCol") Short numericCol,@RequestParam("numericPecCol") BigDecimal numericPecCol,@RequestParam("charCol") String charCol,@RequestParam("varcharPrecCol") String varcharPrecCol,@RequestParam("clobCol") String clobCol,@RequestParam("binaryLargeObjectCol") byte[] binaryLargeObjectCol,@RequestParam("varbinaryPrecCol") String varbinaryPrecCol,@RequestParam("blobCol") byte[] blobCol,@RequestParam("timeCol") Time timeCol,@RequestParam("date") Date date,@RequestParam("timestampCol") Timestamp timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("decimal10Col") Integer decimal10Col,@RequestParam("decimal4Column") Short decimal4Column,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId) throws EntityNotFoundException {

        AlltypesDbHistId alltypesdbhistId = new AlltypesDbHistId();
        alltypesdbhistId.setIntCol(intCol);
        alltypesdbhistId.setIntegerCol(integerCol);
        alltypesdbhistId.setSmallintCol(smallintCol);
        alltypesdbhistId.setBigintCol(bigintCol);
        alltypesdbhistId.setDecimalCol(decimalCol);
        alltypesdbhistId.setNumericCol(numericCol);
        alltypesdbhistId.setNumericPecCol(numericPecCol);
        alltypesdbhistId.setCharCol(charCol);
        alltypesdbhistId.setVarcharPrecCol(varcharPrecCol);
        alltypesdbhistId.setClobCol(clobCol);
        alltypesdbhistId.setBinaryLargeObjectCol(binaryLargeObjectCol);
        alltypesdbhistId.setVarbinaryPrecCol(varbinaryPrecCol);
        alltypesdbhistId.setBlobCol(blobCol);
        alltypesdbhistId.setTimeCol(timeCol);
        alltypesdbhistId.setDate(date);
        alltypesdbhistId.setTimestampCol(timestampCol);
        alltypesdbhistId.setBooleanCol(booleanCol);
        alltypesdbhistId.setDecimal10Col(decimal10Col);
        alltypesdbhistId.setDecimal4Column(decimal4Column);
        alltypesdbhistId.setSysStart(sysStart);
        alltypesdbhistId.setSysEnd(sysEnd);
        alltypesdbhistId.setCreateId(createId);

        LOGGER.debug("Getting AlltypesDbHist with id: {}" , alltypesdbhistId);
        AlltypesDbHist alltypesDbHist = alltypesDbHistService.getById(alltypesdbhistId);
        LOGGER.debug("AlltypesDbHist details with id: {}" , alltypesDbHist);

        return alltypesDbHist;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in AlltypesDbHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getAlltypesDbHistBLOBContent(@RequestParam("intCol") Integer intCol,@RequestParam("integerCol") Integer integerCol,@RequestParam("smallintCol") Short smallintCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("decimalCol") Short decimalCol,@RequestParam("numericCol") Short numericCol,@RequestParam("numericPecCol") BigDecimal numericPecCol,@RequestParam("charCol") String charCol,@RequestParam("varcharPrecCol") String varcharPrecCol,@RequestParam("clobCol") String clobCol,@RequestParam("binaryLargeObjectCol") byte[] binaryLargeObjectCol,@RequestParam("varbinaryPrecCol") String varbinaryPrecCol,@RequestParam("blobCol") byte[] blobCol,@RequestParam("timeCol") Time timeCol,@RequestParam("date") Date date,@RequestParam("timestampCol") Timestamp timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("decimal10Col") Integer decimal10Col,@RequestParam("decimal4Column") Short decimal4Column,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws EntityNotFoundException {

        LOGGER.debug("Retrieves content for the given BLOB field {} in AlltypesDbHist instance" , fieldName);

        if(!WMRuntimeUtils.isLob(AlltypesDbHist.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        AlltypesDbHistId alltypesdbhistId = new AlltypesDbHistId();
        alltypesdbhistId.setIntCol(intCol);
        alltypesdbhistId.setIntegerCol(integerCol);
        alltypesdbhistId.setSmallintCol(smallintCol);
        alltypesdbhistId.setBigintCol(bigintCol);
        alltypesdbhistId.setDecimalCol(decimalCol);
        alltypesdbhistId.setNumericCol(numericCol);
        alltypesdbhistId.setNumericPecCol(numericPecCol);
        alltypesdbhistId.setCharCol(charCol);
        alltypesdbhistId.setVarcharPrecCol(varcharPrecCol);
        alltypesdbhistId.setClobCol(clobCol);
        alltypesdbhistId.setBinaryLargeObjectCol(binaryLargeObjectCol);
        alltypesdbhistId.setVarbinaryPrecCol(varbinaryPrecCol);
        alltypesdbhistId.setBlobCol(blobCol);
        alltypesdbhistId.setTimeCol(timeCol);
        alltypesdbhistId.setDate(date);
        alltypesdbhistId.setTimestampCol(timestampCol);
        alltypesdbhistId.setBooleanCol(booleanCol);
        alltypesdbhistId.setDecimal10Col(decimal10Col);
        alltypesdbhistId.setDecimal4Column(decimal4Column);
        alltypesdbhistId.setSysStart(sysStart);
        alltypesdbhistId.setSysEnd(sysEnd);
        alltypesdbhistId.setCreateId(createId);

        AlltypesDbHist alltypesDbHist = alltypesDbHistService.getById(alltypesdbhistId);
        WMMultipartUtils.buildHttpResponseForBlob(alltypesDbHist, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the AlltypesDbHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesDbHist editAlltypesDbHist(@RequestParam("intCol") Integer intCol,@RequestParam("integerCol") Integer integerCol,@RequestParam("smallintCol") Short smallintCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("decimalCol") Short decimalCol,@RequestParam("numericCol") Short numericCol,@RequestParam("numericPecCol") BigDecimal numericPecCol,@RequestParam("charCol") String charCol,@RequestParam("varcharPrecCol") String varcharPrecCol,@RequestParam("clobCol") String clobCol,@RequestParam("binaryLargeObjectCol") byte[] binaryLargeObjectCol,@RequestParam("varbinaryPrecCol") String varbinaryPrecCol,@RequestParam("blobCol") byte[] blobCol,@RequestParam("timeCol") Time timeCol,@RequestParam("date") Date date,@RequestParam("timestampCol") Timestamp timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("decimal10Col") Integer decimal10Col,@RequestParam("decimal4Column") Short decimal4Column,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId, @RequestBody AlltypesDbHist alltypesDbHist) throws EntityNotFoundException {

        alltypesDbHist.setIntCol(intCol);
        alltypesDbHist.setIntegerCol(integerCol);
        alltypesDbHist.setSmallintCol(smallintCol);
        alltypesDbHist.setBigintCol(bigintCol);
        alltypesDbHist.setDecimalCol(decimalCol);
        alltypesDbHist.setNumericCol(numericCol);
        alltypesDbHist.setNumericPecCol(numericPecCol);
        alltypesDbHist.setCharCol(charCol);
        alltypesDbHist.setVarcharPrecCol(varcharPrecCol);
        alltypesDbHist.setClobCol(clobCol);
        alltypesDbHist.setBinaryLargeObjectCol(binaryLargeObjectCol);
        alltypesDbHist.setVarbinaryPrecCol(varbinaryPrecCol);
        alltypesDbHist.setBlobCol(blobCol);
        alltypesDbHist.setTimeCol(timeCol);
        alltypesDbHist.setDate(date);
        alltypesDbHist.setTimestampCol(timestampCol);
        alltypesDbHist.setBooleanCol(booleanCol);
        alltypesDbHist.setDecimal10Col(decimal10Col);
        alltypesDbHist.setDecimal4Column(decimal4Column);
        alltypesDbHist.setSysStart(sysStart);
        alltypesDbHist.setSysEnd(sysEnd);
        alltypesDbHist.setCreateId(createId);

        LOGGER.debug("AlltypesDbHist details with id is updated with: {}" , alltypesDbHist);

        return alltypesDbHistService.update(alltypesDbHist);
    }

    @ApiOperation(value = "Updates the AlltypesDbHist instance associated with the given composite-id.This API should be used when AlltypesDbHist instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesDbHist editAlltypesDbHist(@RequestParam("intCol") Integer intCol,@RequestParam("integerCol") Integer integerCol,@RequestParam("smallintCol") Short smallintCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("decimalCol") Short decimalCol,@RequestParam("numericCol") Short numericCol,@RequestParam("numericPecCol") BigDecimal numericPecCol,@RequestParam("charCol") String charCol,@RequestParam("varcharPrecCol") String varcharPrecCol,@RequestParam("clobCol") String clobCol,@RequestParam("binaryLargeObjectCol") byte[] binaryLargeObjectCol,@RequestParam("varbinaryPrecCol") String varbinaryPrecCol,@RequestParam("blobCol") byte[] blobCol,@RequestParam("timeCol") Time timeCol,@RequestParam("date") Date date,@RequestParam("timestampCol") Timestamp timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("decimal10Col") Integer decimal10Col,@RequestParam("decimal4Column") Short decimal4Column,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        return this.editAlltypesDbHistAndMultiparts(intCol, integerCol, smallintCol, bigintCol, decimalCol, numericCol, numericPecCol, charCol, varcharPrecCol, clobCol, binaryLargeObjectCol, varbinaryPrecCol, blobCol, timeCol, date, timestampCol, booleanCol, decimal10Col, decimal4Column, sysStart, sysEnd, createId, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the AlltypesDbHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesDbHist editAlltypesDbHistAndMultiparts(@RequestParam("intCol") Integer intCol,@RequestParam("integerCol") Integer integerCol,@RequestParam("smallintCol") Short smallintCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("decimalCol") Short decimalCol,@RequestParam("numericCol") Short numericCol,@RequestParam("numericPecCol") BigDecimal numericPecCol,@RequestParam("charCol") String charCol,@RequestParam("varcharPrecCol") String varcharPrecCol,@RequestParam("clobCol") String clobCol,@RequestParam("binaryLargeObjectCol") byte[] binaryLargeObjectCol,@RequestParam("varbinaryPrecCol") String varbinaryPrecCol,@RequestParam("blobCol") byte[] blobCol,@RequestParam("timeCol") Time timeCol,@RequestParam("date") Date date,@RequestParam("timestampCol") Timestamp timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("decimal10Col") Integer decimal10Col,@RequestParam("decimal4Column") Short decimal4Column,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException { 

        AlltypesDbHistId alltypesdbhistId = new AlltypesDbHistId();
        alltypesdbhistId.setIntCol(intCol);
        alltypesdbhistId.setIntegerCol(integerCol);
        alltypesdbhistId.setSmallintCol(smallintCol);
        alltypesdbhistId.setBigintCol(bigintCol);
        alltypesdbhistId.setDecimalCol(decimalCol);
        alltypesdbhistId.setNumericCol(numericCol);
        alltypesdbhistId.setNumericPecCol(numericPecCol);
        alltypesdbhistId.setCharCol(charCol);
        alltypesdbhistId.setVarcharPrecCol(varcharPrecCol);
        alltypesdbhistId.setClobCol(clobCol);
        alltypesdbhistId.setBinaryLargeObjectCol(binaryLargeObjectCol);
        alltypesdbhistId.setVarbinaryPrecCol(varbinaryPrecCol);
        alltypesdbhistId.setBlobCol(blobCol);
        alltypesdbhistId.setTimeCol(timeCol);
        alltypesdbhistId.setDate(date);
        alltypesdbhistId.setTimestampCol(timestampCol);
        alltypesdbhistId.setBooleanCol(booleanCol);
        alltypesdbhistId.setDecimal10Col(decimal10Col);
        alltypesdbhistId.setDecimal4Column(decimal4Column);
        alltypesdbhistId.setSysStart(sysStart);
        alltypesdbhistId.setSysEnd(sysEnd);
        alltypesdbhistId.setCreateId(createId);

        AlltypesDbHist newAlltypesDbHist = WMMultipartUtils.toObject(multipartHttpServletRequest, AlltypesDbHist.class, "SAMPLE");
        AlltypesDbHist oldAlltypesDbHist = alltypesDbHistService.getById(alltypesdbhistId);

        WMMultipartUtils.updateLobsContent(oldAlltypesDbHist, newAlltypesDbHist);

        newAlltypesDbHist.setIntCol(intCol);
        newAlltypesDbHist.setIntegerCol(integerCol);
        newAlltypesDbHist.setSmallintCol(smallintCol);
        newAlltypesDbHist.setBigintCol(bigintCol);
        newAlltypesDbHist.setDecimalCol(decimalCol);
        newAlltypesDbHist.setNumericCol(numericCol);
        newAlltypesDbHist.setNumericPecCol(numericPecCol);
        newAlltypesDbHist.setCharCol(charCol);
        newAlltypesDbHist.setVarcharPrecCol(varcharPrecCol);
        newAlltypesDbHist.setClobCol(clobCol);
        newAlltypesDbHist.setBinaryLargeObjectCol(binaryLargeObjectCol);
        newAlltypesDbHist.setVarbinaryPrecCol(varbinaryPrecCol);
        newAlltypesDbHist.setBlobCol(blobCol);
        newAlltypesDbHist.setTimeCol(timeCol);
        newAlltypesDbHist.setDate(date);
        newAlltypesDbHist.setTimestampCol(timestampCol);
        newAlltypesDbHist.setBooleanCol(booleanCol);
        newAlltypesDbHist.setDecimal10Col(decimal10Col);
        newAlltypesDbHist.setDecimal4Column(decimal4Column);
        newAlltypesDbHist.setSysStart(sysStart);
        newAlltypesDbHist.setSysEnd(sysEnd);
        newAlltypesDbHist.setCreateId(createId);

        LOGGER.debug("AlltypesDbHist details with id is updated with: {}" , newAlltypesDbHist);

        return alltypesDbHistService.update(newAlltypesDbHist);
    }


    @ApiOperation(value = "Deletes the AlltypesDbHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAlltypesDbHist(@RequestParam("intCol") Integer intCol,@RequestParam("integerCol") Integer integerCol,@RequestParam("smallintCol") Short smallintCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("decimalCol") Short decimalCol,@RequestParam("numericCol") Short numericCol,@RequestParam("numericPecCol") BigDecimal numericPecCol,@RequestParam("charCol") String charCol,@RequestParam("varcharPrecCol") String varcharPrecCol,@RequestParam("clobCol") String clobCol,@RequestParam("binaryLargeObjectCol") byte[] binaryLargeObjectCol,@RequestParam("varbinaryPrecCol") String varbinaryPrecCol,@RequestParam("blobCol") byte[] blobCol,@RequestParam("timeCol") Time timeCol,@RequestParam("date") Date date,@RequestParam("timestampCol") Timestamp timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("decimal10Col") Integer decimal10Col,@RequestParam("decimal4Column") Short decimal4Column,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId) throws EntityNotFoundException {

        AlltypesDbHistId alltypesdbhistId = new AlltypesDbHistId();
        alltypesdbhistId.setIntCol(intCol);
        alltypesdbhistId.setIntegerCol(integerCol);
        alltypesdbhistId.setSmallintCol(smallintCol);
        alltypesdbhistId.setBigintCol(bigintCol);
        alltypesdbhistId.setDecimalCol(decimalCol);
        alltypesdbhistId.setNumericCol(numericCol);
        alltypesdbhistId.setNumericPecCol(numericPecCol);
        alltypesdbhistId.setCharCol(charCol);
        alltypesdbhistId.setVarcharPrecCol(varcharPrecCol);
        alltypesdbhistId.setClobCol(clobCol);
        alltypesdbhistId.setBinaryLargeObjectCol(binaryLargeObjectCol);
        alltypesdbhistId.setVarbinaryPrecCol(varbinaryPrecCol);
        alltypesdbhistId.setBlobCol(blobCol);
        alltypesdbhistId.setTimeCol(timeCol);
        alltypesdbhistId.setDate(date);
        alltypesdbhistId.setTimestampCol(timestampCol);
        alltypesdbhistId.setBooleanCol(booleanCol);
        alltypesdbhistId.setDecimal10Col(decimal10Col);
        alltypesdbhistId.setDecimal4Column(decimal4Column);
        alltypesdbhistId.setSysStart(sysStart);
        alltypesdbhistId.setSysEnd(sysEnd);
        alltypesdbhistId.setCreateId(createId);

        LOGGER.debug("Deleting AlltypesDbHist with id: {}" , alltypesdbhistId);
        AlltypesDbHist alltypesDbHist = alltypesDbHistService.delete(alltypesdbhistId);

        return alltypesDbHist != null;
    }


    /**
     * @deprecated Use {@link #findAlltypesDbHists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AlltypesDbHist instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AlltypesDbHist> searchAlltypesDbHistsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AlltypesDbHists list");
        return alltypesDbHistService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AlltypesDbHist instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AlltypesDbHist> findAlltypesDbHists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AlltypesDbHists list");
        return alltypesDbHistService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AlltypesDbHist instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AlltypesDbHist> filterAlltypesDbHists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AlltypesDbHists list");
        return alltypesDbHistService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAlltypesDbHists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return alltypesDbHistService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AlltypesDbHist instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAlltypesDbHists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AlltypesDbHists");
		return alltypesDbHistService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAlltypesDbHistAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return alltypesDbHistService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AlltypesDbHistService instance
	 */
	protected void setAlltypesDbHistService(AlltypesDbHistService service) {
		this.alltypesDbHistService = service;
	}

}

