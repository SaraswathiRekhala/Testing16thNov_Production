/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thnov_production.sample.HistPolicyInfo;
import com.testing16thnov_production.sample.HistPolicyInfoId;
import com.testing16thnov_production.sample.service.HistPolicyInfoService;


/**
 * Controller object for domain model class HistPolicyInfo.
 * @see HistPolicyInfo
 */
@RestController("SAMPLE.HistPolicyInfoController")
@Api(value = "HistPolicyInfoController", description = "Exposes APIs to work with HistPolicyInfo resource.")
@RequestMapping("/SAMPLE/HistPolicyInfo")
public class HistPolicyInfoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(HistPolicyInfoController.class);

    @Autowired
	@Qualifier("SAMPLE.HistPolicyInfoService")
	private HistPolicyInfoService histPolicyInfoService;

	@ApiOperation(value = "Creates a new HistPolicyInfo instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public HistPolicyInfo createHistPolicyInfo(@RequestBody HistPolicyInfo histPolicyInfo) {
		LOGGER.debug("Create HistPolicyInfo with information: {}" , histPolicyInfo);

		histPolicyInfo = histPolicyInfoService.create(histPolicyInfo);
		LOGGER.debug("Created HistPolicyInfo with information: {}" , histPolicyInfo);

	    return histPolicyInfo;
	}

@ApiOperation(value = "Returns the HistPolicyInfo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public HistPolicyInfo getHistPolicyInfo(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId) throws EntityNotFoundException {

        HistPolicyInfoId histpolicyinfoId = new HistPolicyInfoId();
        histpolicyinfoId.setPolicyId(policyId);
        histpolicyinfoId.setCoverage(coverage);
        histpolicyinfoId.setSysStart(sysStart);
        histpolicyinfoId.setSysEnd(sysEnd);
        histpolicyinfoId.setCreateId(createId);

        LOGGER.debug("Getting HistPolicyInfo with id: {}" , histpolicyinfoId);
        HistPolicyInfo histPolicyInfo = histPolicyInfoService.getById(histpolicyinfoId);
        LOGGER.debug("HistPolicyInfo details with id: {}" , histPolicyInfo);

        return histPolicyInfo;
    }



    @ApiOperation(value = "Updates the HistPolicyInfo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public HistPolicyInfo editHistPolicyInfo(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId, @RequestBody HistPolicyInfo histPolicyInfo) throws EntityNotFoundException {

        histPolicyInfo.setPolicyId(policyId);
        histPolicyInfo.setCoverage(coverage);
        histPolicyInfo.setSysStart(sysStart);
        histPolicyInfo.setSysEnd(sysEnd);
        histPolicyInfo.setCreateId(createId);

        LOGGER.debug("HistPolicyInfo details with id is updated with: {}" , histPolicyInfo);

        return histPolicyInfoService.update(histPolicyInfo);
    }


    @ApiOperation(value = "Deletes the HistPolicyInfo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteHistPolicyInfo(@RequestParam("policyId") String policyId,@RequestParam("coverage") Integer coverage,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("createId") Timestamp createId) throws EntityNotFoundException {

        HistPolicyInfoId histpolicyinfoId = new HistPolicyInfoId();
        histpolicyinfoId.setPolicyId(policyId);
        histpolicyinfoId.setCoverage(coverage);
        histpolicyinfoId.setSysStart(sysStart);
        histpolicyinfoId.setSysEnd(sysEnd);
        histpolicyinfoId.setCreateId(createId);

        LOGGER.debug("Deleting HistPolicyInfo with id: {}" , histpolicyinfoId);
        HistPolicyInfo histPolicyInfo = histPolicyInfoService.delete(histpolicyinfoId);

        return histPolicyInfo != null;
    }


    /**
     * @deprecated Use {@link #findHistPolicyInfos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of HistPolicyInfo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<HistPolicyInfo> searchHistPolicyInfosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering HistPolicyInfos list");
        return histPolicyInfoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of HistPolicyInfo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<HistPolicyInfo> findHistPolicyInfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering HistPolicyInfos list");
        return histPolicyInfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of HistPolicyInfo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<HistPolicyInfo> filterHistPolicyInfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering HistPolicyInfos list");
        return histPolicyInfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportHistPolicyInfos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return histPolicyInfoService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of HistPolicyInfo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countHistPolicyInfos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting HistPolicyInfos");
		return histPolicyInfoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getHistPolicyInfoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return histPolicyInfoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service HistPolicyInfoService instance
	 */
	protected void setHistPolicyInfoService(HistPolicyInfoService service) {
		this.histPolicyInfoService = service;
	}

}

