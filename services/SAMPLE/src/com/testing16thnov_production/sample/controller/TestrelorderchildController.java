/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thnov_production.sample.TestrelorderId;
import com.testing16thnov_production.sample.Testrelorderchild;
import com.testing16thnov_production.sample.service.TestrelorderchildService;


/**
 * Controller object for domain model class Testrelorderchild.
 * @see Testrelorderchild
 */
@RestController("SAMPLE.TestrelorderchildController")
@Api(value = "TestrelorderchildController", description = "Exposes APIs to work with Testrelorderchild resource.")
@RequestMapping("/SAMPLE/Testrelorderchild")
public class TestrelorderchildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestrelorderchildController.class);

    @Autowired
	@Qualifier("SAMPLE.TestrelorderchildService")
	private TestrelorderchildService testrelorderchildService;

	@ApiOperation(value = "Creates a new Testrelorderchild instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Testrelorderchild createTestrelorderchild(@RequestBody Testrelorderchild testrelorderchild) {
		LOGGER.debug("Create Testrelorderchild with information: {}" , testrelorderchild);

		testrelorderchild = testrelorderchildService.create(testrelorderchild);
		LOGGER.debug("Created Testrelorderchild with information: {}" , testrelorderchild);

	    return testrelorderchild;
	}

@ApiOperation(value = "Returns the Testrelorderchild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testrelorderchild getTestrelorderchild(@RequestParam("column2") Integer column2,@RequestParam("column1") Integer column1) throws EntityNotFoundException {

        TestrelorderId testrelorderchildId = new TestrelorderId();
        testrelorderchildId.setColumn2(column2);
        testrelorderchildId.setColumn1(column1);

        LOGGER.debug("Getting Testrelorderchild with id: {}" , testrelorderchildId);
        Testrelorderchild testrelorderchild = testrelorderchildService.getById(testrelorderchildId);
        LOGGER.debug("Testrelorderchild details with id: {}" , testrelorderchild);

        return testrelorderchild;
    }



    @ApiOperation(value = "Updates the Testrelorderchild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testrelorderchild editTestrelorderchild(@RequestParam("column2") Integer column2,@RequestParam("column1") Integer column1, @RequestBody Testrelorderchild testrelorderchild) throws EntityNotFoundException {

        testrelorderchild.setColumn2(column2);
        testrelorderchild.setColumn1(column1);

        LOGGER.debug("Testrelorderchild details with id is updated with: {}" , testrelorderchild);

        return testrelorderchildService.update(testrelorderchild);
    }


    @ApiOperation(value = "Deletes the Testrelorderchild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestrelorderchild(@RequestParam("column2") Integer column2,@RequestParam("column1") Integer column1) throws EntityNotFoundException {

        TestrelorderId testrelorderchildId = new TestrelorderId();
        testrelorderchildId.setColumn2(column2);
        testrelorderchildId.setColumn1(column1);

        LOGGER.debug("Deleting Testrelorderchild with id: {}" , testrelorderchildId);
        Testrelorderchild testrelorderchild = testrelorderchildService.delete(testrelorderchildId);

        return testrelorderchild != null;
    }


    /**
     * @deprecated Use {@link #findTestrelorderchildren(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testrelorderchild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelorderchild> searchTestrelorderchildrenByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testrelorderchildren list");
        return testrelorderchildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testrelorderchild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelorderchild> findTestrelorderchildren(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testrelorderchildren list");
        return testrelorderchildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testrelorderchild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelorderchild> filterTestrelorderchildren(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testrelorderchildren list");
        return testrelorderchildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestrelorderchildren(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testrelorderchildService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Testrelorderchild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestrelorderchildren( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testrelorderchildren");
		return testrelorderchildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestrelorderchildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testrelorderchildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestrelorderchildService instance
	 */
	protected void setTestrelorderchildService(TestrelorderchildService service) {
		this.testrelorderchildService = service;
	}

}

