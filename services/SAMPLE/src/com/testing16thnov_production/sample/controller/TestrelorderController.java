/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thnov_production.sample.Testrelorder;
import com.testing16thnov_production.sample.TestrelorderId;
import com.testing16thnov_production.sample.service.TestrelorderService;


/**
 * Controller object for domain model class Testrelorder.
 * @see Testrelorder
 */
@RestController("SAMPLE.TestrelorderController")
@Api(value = "TestrelorderController", description = "Exposes APIs to work with Testrelorder resource.")
@RequestMapping("/SAMPLE/Testrelorder")
public class TestrelorderController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestrelorderController.class);

    @Autowired
	@Qualifier("SAMPLE.TestrelorderService")
	private TestrelorderService testrelorderService;

	@ApiOperation(value = "Creates a new Testrelorder instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Testrelorder createTestrelorder(@RequestBody Testrelorder testrelorder) {
		LOGGER.debug("Create Testrelorder with information: {}" , testrelorder);

		testrelorder = testrelorderService.create(testrelorder);
		LOGGER.debug("Created Testrelorder with information: {}" , testrelorder);

	    return testrelorder;
	}

@ApiOperation(value = "Returns the Testrelorder instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testrelorder getTestrelorder(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2) throws EntityNotFoundException {

        TestrelorderId testrelorderId = new TestrelorderId();
        testrelorderId.setColumn1(column1);
        testrelorderId.setColumn2(column2);

        LOGGER.debug("Getting Testrelorder with id: {}" , testrelorderId);
        Testrelorder testrelorder = testrelorderService.getById(testrelorderId);
        LOGGER.debug("Testrelorder details with id: {}" , testrelorder);

        return testrelorder;
    }



    @ApiOperation(value = "Updates the Testrelorder instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testrelorder editTestrelorder(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2, @RequestBody Testrelorder testrelorder) throws EntityNotFoundException {

        testrelorder.setColumn1(column1);
        testrelorder.setColumn2(column2);

        LOGGER.debug("Testrelorder details with id is updated with: {}" , testrelorder);

        return testrelorderService.update(testrelorder);
    }


    @ApiOperation(value = "Deletes the Testrelorder instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestrelorder(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2) throws EntityNotFoundException {

        TestrelorderId testrelorderId = new TestrelorderId();
        testrelorderId.setColumn1(column1);
        testrelorderId.setColumn2(column2);

        LOGGER.debug("Deleting Testrelorder with id: {}" , testrelorderId);
        Testrelorder testrelorder = testrelorderService.delete(testrelorderId);

        return testrelorder != null;
    }


    /**
     * @deprecated Use {@link #findTestrelorders(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testrelorder instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelorder> searchTestrelordersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testrelorders list");
        return testrelorderService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testrelorder instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelorder> findTestrelorders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testrelorders list");
        return testrelorderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testrelorder instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelorder> filterTestrelorders(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testrelorders list");
        return testrelorderService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestrelorders(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testrelorderService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Testrelorder instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestrelorders( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testrelorders");
		return testrelorderService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestrelorderAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testrelorderService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestrelorderService instance
	 */
	protected void setTestrelorderService(TestrelorderService service) {
		this.testrelorderService = service;
	}

}

