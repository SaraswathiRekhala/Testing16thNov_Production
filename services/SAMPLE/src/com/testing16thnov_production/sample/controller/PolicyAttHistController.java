/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing16thnov_production.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing16thnov_production.sample.PolicyAttHist;
import com.testing16thnov_production.sample.PolicyAttHistId;
import com.testing16thnov_production.sample.service.PolicyAttHistService;


/**
 * Controller object for domain model class PolicyAttHist.
 * @see PolicyAttHist
 */
@RestController("SAMPLE.PolicyAttHistController")
@Api(value = "PolicyAttHistController", description = "Exposes APIs to work with PolicyAttHist resource.")
@RequestMapping("/SAMPLE/PolicyAttHist")
public class PolicyAttHistController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyAttHistController.class);

    @Autowired
	@Qualifier("SAMPLE.PolicyAttHistService")
	private PolicyAttHistService policyAttHistService;

	@ApiOperation(value = "Creates a new PolicyAttHist instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PolicyAttHist createPolicyAttHist(@RequestBody PolicyAttHist policyAttHist) {
		LOGGER.debug("Create PolicyAttHist with information: {}" , policyAttHist);

		policyAttHist = policyAttHistService.create(policyAttHist);
		LOGGER.debug("Created PolicyAttHist with information: {}" , policyAttHist);

	    return policyAttHist;
	}

@ApiOperation(value = "Returns the PolicyAttHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyAttHist getPolicyAttHist(@RequestParam("bank") String bank,@RequestParam("busBegin") Timestamp busBegin,@RequestParam("busEnd") Timestamp busEnd,@RequestParam("client") String client,@RequestParam("type") String type,@RequestParam("pay") Integer pay) throws EntityNotFoundException {

        PolicyAttHistId policyatthistId = new PolicyAttHistId();
        policyatthistId.setBank(bank);
        policyatthistId.setBusBegin(busBegin);
        policyatthistId.setBusEnd(busEnd);
        policyatthistId.setClient(client);
        policyatthistId.setType(type);
        policyatthistId.setPay(pay);

        LOGGER.debug("Getting PolicyAttHist with id: {}" , policyatthistId);
        PolicyAttHist policyAttHist = policyAttHistService.getById(policyatthistId);
        LOGGER.debug("PolicyAttHist details with id: {}" , policyAttHist);

        return policyAttHist;
    }



    @ApiOperation(value = "Updates the PolicyAttHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyAttHist editPolicyAttHist(@RequestParam("bank") String bank,@RequestParam("busBegin") Timestamp busBegin,@RequestParam("busEnd") Timestamp busEnd,@RequestParam("client") String client,@RequestParam("type") String type,@RequestParam("pay") Integer pay, @RequestBody PolicyAttHist policyAttHist) throws EntityNotFoundException {

        policyAttHist.setBank(bank);
        policyAttHist.setBusBegin(busBegin);
        policyAttHist.setBusEnd(busEnd);
        policyAttHist.setClient(client);
        policyAttHist.setType(type);
        policyAttHist.setPay(pay);

        LOGGER.debug("PolicyAttHist details with id is updated with: {}" , policyAttHist);

        return policyAttHistService.update(policyAttHist);
    }


    @ApiOperation(value = "Deletes the PolicyAttHist instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicyAttHist(@RequestParam("bank") String bank,@RequestParam("busBegin") Timestamp busBegin,@RequestParam("busEnd") Timestamp busEnd,@RequestParam("client") String client,@RequestParam("type") String type,@RequestParam("pay") Integer pay) throws EntityNotFoundException {

        PolicyAttHistId policyatthistId = new PolicyAttHistId();
        policyatthistId.setBank(bank);
        policyatthistId.setBusBegin(busBegin);
        policyatthistId.setBusEnd(busEnd);
        policyatthistId.setClient(client);
        policyatthistId.setType(type);
        policyatthistId.setPay(pay);

        LOGGER.debug("Deleting PolicyAttHist with id: {}" , policyatthistId);
        PolicyAttHist policyAttHist = policyAttHistService.delete(policyatthistId);

        return policyAttHist != null;
    }


    /**
     * @deprecated Use {@link #findPolicyAttHists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PolicyAttHist instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyAttHist> searchPolicyAttHistsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PolicyAttHists list");
        return policyAttHistService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyAttHist instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyAttHist> findPolicyAttHists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyAttHists list");
        return policyAttHistService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyAttHist instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyAttHist> filterPolicyAttHists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyAttHists list");
        return policyAttHistService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicyAttHists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policyAttHistService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PolicyAttHist instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicyAttHists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PolicyAttHists");
		return policyAttHistService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicyAttHistAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policyAttHistService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicyAttHistService instance
	 */
	protected void setPolicyAttHistService(PolicyAttHistService service) {
		this.policyAttHistService = service;
	}

}

